function Content() {}
function Meta() {}

exports.build = function() {
	"use strict";

	var
		fs = require("fs"),
		swig = require("swig"),
		marked = require("marked"),

		config = {
			"output":    "./build",
			"contents":  "./contents",
			"templates": "./templates",

			"defaults": {
				"template": "content.html"
			}
		};

	var file;

	try {
		file = fs.readFileSync('smith.json');
		file = JSON.parse(file);
	} catch(e) {
		file = {};
	}
	

	for (var prop in file) {
		config[prop] = file[prop];
	}


	swig.init({
		root: config.templates,
		filters: {
			marked: function( text ) {
				return marked( text );
			}
		}
	});


	if (!fs.existsSync(config.output)) {
		fs.mkdirSync(config.output);
	}


	function b(path) {
		var files = fs.readdirSync(path);
		var tree = {};
		var m = {};
		var rContent = /\.([\w\d]+)$/;
		for (var i = 0, count = files.length; i < count; i++) {
			var slug = files[i].substring(0, files[i].lastIndexOf('.'));
			var ext = rContent.exec(files[i]);

			if (!ext) {
				b(path + "/" + files[i]);
				continue;
			}

			if (/md|html|txt/.test(ext[1])) {
				var content = new Content();
				content.file = files[i];
				tree[slug] = content;
			} else if (/json|yml/.test(ext[1])) {
				var meta = new Meta();
				meta.file = files[i];
				m[slug] = meta;
			}

		}

		for (var slug in tree) {
			if (m[slug]) {
				tree[slug].meta = m[slug];
			}
		}

		for (var slug in m) {
			if (!tree[slug]) {
				tree[slug] = new Content();
			}
		}

		for (var slug in tree) {
			var meta = {};

			if (tree[slug].meta) {
				var c = fs.readFileSync(path + "/" + tree[slug].meta.file);
				try {
					meta = JSON.parse(c);
				} catch(e) {}
			}



			var template = meta.template !== undefined ? meta.template : config.defaults.template;

			if (!template) {
				continue;
			}

			template = swig.compileFile(template);

			var content = fs.existsSync(path + "/" + tree[slug].file) ? fs.readFileSync(path + "/" + tree[slug].file, { encoding: "utf-8"}) : "";
			var output = path.replace(config.contents, "") + "/" + slug + ".html";

			if (!fs.existsSync(config.output + path.replace(config.contents, ""))) {
				fs.mkdirSync(config.output + path.replace(config.contents, ""));
			}
			

			fs.writeFileSync(config.output + output, template.render({
				meta: tree[slug].meta || {},
				content: content
			}));
		}
	}

	b(config.contents);
};